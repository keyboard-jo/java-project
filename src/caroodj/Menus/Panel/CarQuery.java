/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Menus.Panel;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

import javax.swing.JOptionPane;

import Objects.CarDataFile;

/**
 *
 * @author JUSTIN
 */
public class CarQuery extends javax.swing.JPanel {

    /**
     * Creates new form CarQuery
     */
    public CarQuery() {
        comparisonSymbol = new ArrayList<String>();

        comparisonSymbol.add("=");
        comparisonSymbol.add(">");
        comparisonSymbol.add("<");
        comparisonSymbol.add("~");
        comparisonSymbol.add("*");

        comparisonSymbolYOPIterator = comparisonSymbol.iterator();
        comparisonSymbolRentIterator = comparisonSymbol.iterator();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        queryLabel = new javax.swing.JLabel();
        manufactureLabel = new javax.swing.JLabel();
        modelLabel = new javax.swing.JLabel();
        manufactureField = new javax.swing.JTextField();
        modelField = new javax.swing.JTextField();
        yopPanel = new javax.swing.JPanel();
        yopLabel = new javax.swing.JLabel();
        yopField1 = new com.toedter.calendar.JDateChooser();
        yopButton = new javax.swing.JButton();
        rentalPanel = new javax.swing.JPanel();
        rentalLabel = new javax.swing.JLabel();
        rentField1 = new javax.swing.JTextField();
        rentalButton = new javax.swing.JButton();
        seperator = new javax.swing.JSeparator();
        yopField2 = new com.toedter.calendar.JDateChooser();
        rentField2 = new javax.swing.JTextField();

        setMinimumSize(new java.awt.Dimension(1276, 200));
        setPreferredSize(new java.awt.Dimension(1276, 200));

        queryLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        queryLabel.setText("Query 1");

        manufactureLabel.setText("Manufacture:");

        modelLabel.setText("Model:");

        manufactureField.setMinimumSize(new java.awt.Dimension(178, 22));
        manufactureField.setPreferredSize(new java.awt.Dimension(178, 22));

        modelField.setMinimumSize(new java.awt.Dimension(178, 22));
        modelField.setPreferredSize(new java.awt.Dimension(178, 22));

        yopLabel.setText("Year of Production:");
        yopPanel.add(yopLabel);

        yopField1.setPreferredSize(new java.awt.Dimension(150, 22));
        yopPanel.add(yopField1);

        yopButton.setText("<");
        yopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yopButtonActionPerformed(evt);
            }
        });
        yopPanel.add(yopButton);

        rentalLabel.setText("Rental Cost:");
        rentalPanel.add(rentalLabel);

        rentField1.setMinimumSize(new java.awt.Dimension(150, 22));
        rentField1.setPreferredSize(new java.awt.Dimension(150, 22));
        rentalPanel.add(rentField1);

        rentalButton.setText("<");
        rentalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentalButtonActionPerformed(evt);
            }
        });
        rentalPanel.add(rentalButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(365, 365, 365)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(modelLabel)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(manufactureLabel)
                                .addComponent(queryLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(manufactureField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(modelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(rentalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(seperator, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(352, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(queryLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manufactureLabel)
                    .addComponent(manufactureField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rentalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(modelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(modelLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seperator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(117, Short.MAX_VALUE))
        );
    }// </editor-fold>                        

    private void yopButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        if (!comparisonSymbolYOPIterator.hasNext()) {
            comparisonSymbolYOPIterator = comparisonSymbol.iterator();
        }
        yopButton.setText(comparisonSymbolYOPIterator.next());
        if (yopButton.getText().equals("~")) {
            yopPanel.add(yopField2);
        } else {
            yopPanel.remove(yopField2);
        }
    }                                         

    private void rentalButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        if (!comparisonSymbolRentIterator.hasNext()) {
            comparisonSymbolRentIterator = comparisonSymbol.iterator();
        }
        rentalButton.setText(comparisonSymbolRentIterator.next());
        if (rentalButton.getText().equals("~")) {
            rentalPanel.add(rentField2);
        } else {
            rentalPanel.remove(rentField2);
        }
    }
    
    public void setQueryLabel(String label) {
        this.queryLabel.setText(label);
    }

    public HashMap<String, String> getQueryData() {
        CarDataFile cdf = new CarDataFile("src\\caroodj\\Data\\Car.txt");

        try {
            String yopSymbol = yopButton.getText();

            String rentSymbol = rentalButton.getText();

            String yopQuery = null;
            String rentQuery = null;

            if (yopField1.getDate() != null) {
                LocalDate yop1 = yopField1.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            switch (yopSymbol) {
                case "<":
                    yopQuery = "* " + yop1;
                    break;
                case "=":
                    yopQuery = yop1+"";
                    break;
                case ">":
                    yopQuery = yop1 + " *";
                    break;
                case "~":
                    if (yopField2.getDate() != null) {
                        LocalDate yop2 = yopField2.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                        yopQuery = yop1 + " " + yop2;
                    } else {
                        yopQuery = yop1 + " *";
                    }
                    break;
                case "*":
                    yopQuery = "*";
                    break;
                default:
                    break;
                }
            } else {
                yopQuery = "*";
            }

            if (!rentField1.getText().equals("")) {
                try {
                    Double rent1 = Double.parseDouble(rentField1.getText());
                    switch (rentSymbol) {
                        case "<":
                            rentQuery = "* "+ rent1;
                            break;
                        case "=":
                            rentQuery = rent1+"";
                            break;
                        case ">":
                            rentQuery = rent1 + " *";
                            break;
                        case "~":
                            if (!rentField2.getText().equals("")) {
                                try {
                                    Double rent2 = Double.parseDouble(rentField2.getText());
                                    rentQuery = rent1 + " " + rent2;    
                                } catch (Exception e) {
                                    System.out.println("Cannnot Parse");
                                    return null;
                                }
                            } else {
                                rentQuery = rent1 + " *";
                            }
                            break;
                        case "*":
                            rentQuery = "*";
                            break;
                        default:
                            break;
                    }
                } catch (Exception e) {
                    System.out.println("Cannnot Parse");
                    return null;
                }
            } else {
                rentQuery = "*";
            }

            String manufactureQuery = (manufactureField.getText().equals("") ? "*" : manufactureField.getText());

            String modelQuery = (modelField.getText().equals("") ? "*" : modelField.getText());

            String[] carQuery = {"*", manufactureQuery, modelQuery, yopQuery, rentQuery, "*"};

            return cdf.createQuery(carQuery);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please use the correct format for each field");
        }
        return null;
    }

    private com.toedter.calendar.JDateChooser yopField2;
    private javax.swing.JTextField rentField2;

    private ArrayList<String> comparisonSymbol;
    private Iterator<String> comparisonSymbolYOPIterator;
    private Iterator<String> comparisonSymbolRentIterator;

    // Variables declaration - do not modify                     
    private com.toedter.calendar.JDateChooser yopField1;
    private javax.swing.JTextField manufactureField;
    private javax.swing.JLabel manufactureLabel;
    private javax.swing.JTextField modelField;
    private javax.swing.JLabel modelLabel;
    private javax.swing.JLabel queryLabel;
    private javax.swing.JTextField rentField1;
    private javax.swing.JButton rentalButton;
    private javax.swing.JLabel rentalLabel;
    private javax.swing.JPanel rentalPanel;
    private javax.swing.JSeparator seperator;
    private javax.swing.JButton yopButton;
    private javax.swing.JLabel yopLabel;
    private javax.swing.JPanel yopPanel;
    // End of variables declaration                   
}
