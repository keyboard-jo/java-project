/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Menus.Panel;

/**
 *
 * @author JUSTIN
 */

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

import javax.swing.JOptionPane;

import Objects.PersonDataFile;

public class ClientQuery extends javax.swing.JPanel {

    /**
     * Creates new form ClientQuery
     */
    public ClientQuery() {
        comparisonSymbol = new ArrayList<String>();

        comparisonSymbol.add("=");
        comparisonSymbol.add(">");
        comparisonSymbol.add("<");
        comparisonSymbol.add("~");
        comparisonSymbol.add("*");

        comparisonSymbolDOBIterator = comparisonSymbol.iterator();

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        clientIdLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        clientIdField = new javax.swing.JTextField();
        usernameField = new javax.swing.JTextField();
        emailField = new javax.swing.JTextField();
        nameField = new javax.swing.JTextField();
        DOBPAnel = new javax.swing.JPanel();
        DOBLabel = new javax.swing.JLabel();
        DOBField = new com.toedter.calendar.JDateChooser();
        DOBButton = new javax.swing.JButton();
        queryLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        DOBField1 = new com.toedter.calendar.JDateChooser();

        setMinimumSize(new java.awt.Dimension(1264, 100));
        setPreferredSize(new java.awt.Dimension(1264, 100));

        clientIdLabel.setText("Client ID:");

        usernameLabel.setText("Username:");

        emailLabel.setText("Email:");

        nameLabel.setText("Name:");

        clientIdField.setMinimumSize(new java.awt.Dimension(178, 22));
        clientIdField.setPreferredSize(new java.awt.Dimension(178, 22));

        usernameField.setMinimumSize(new java.awt.Dimension(178, 22));
        usernameField.setPreferredSize(new java.awt.Dimension(178, 22));

        emailField.setMinimumSize(new java.awt.Dimension(178, 22));
        emailField.setPreferredSize(new java.awt.Dimension(178, 22));

        nameField.setMinimumSize(new java.awt.Dimension(178, 22));
        nameField.setPreferredSize(new java.awt.Dimension(178, 22));

        DOBLabel.setText("DOB:");
        DOBPAnel.add(DOBLabel);

        DOBField.setPreferredSize(new java.awt.Dimension(150, 22));
        DOBPAnel.add(DOBField);

        DOBButton.setText("<");
        DOBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DOBButtonActionPerformed(evt);
            }
        });
        DOBPAnel.add(DOBButton);

        queryLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        queryLabel.setText("Query 1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(406, 406, 406)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(queryLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(usernameLabel)
                                    .addComponent(clientIdLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(clientIdField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(usernameField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DOBPAnel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(nameLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jSeparator1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(429, 429, 429)
                        .addComponent(emailLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addContainerGap(386, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(queryLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(clientIdLabel)
                        .addComponent(clientIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(DOBPAnel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLabel)
                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
    }// </editor-fold>                        

    private void DOBButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        if (!comparisonSymbolDOBIterator.hasNext()) {
            comparisonSymbolDOBIterator = comparisonSymbol.iterator();
        }

        DOBButton.setText(comparisonSymbolDOBIterator.next());

        if (DOBButton.getText().equals("~")) {
            DOBPAnel.add(DOBField1);
        } else {
            DOBPAnel.remove(DOBField1);
        }
    }     

    public HashMap<String, String> getQueryData() {
        PersonDataFile pdf = new PersonDataFile("src\\caroodj\\Data\\Person.txt");

        try {
            String DOBSymbol = DOBButton.getText();

            String DOBQuery = null;

            if (DOBField.getDate() != null) {
                LocalDate dob1 = DOBField.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            switch (DOBSymbol) {
                case "<":
                    DOBQuery = "* " + dob1;
                    break;
                case "=":
                    DOBQuery = dob1+"";
                    break;
                case ">":
                    DOBQuery = dob1 + " *";
                    break;
                case "~":
                    if (DOBField1.getDate() != null) {
                        LocalDate dob2 = DOBField1.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                        DOBQuery = dob1 + " " + dob2;
                    } else {
                        DOBQuery = dob1 + " *";
                    }
                    break;
                case "*":
                    DOBQuery = "*";
                    break;
                default:
                    break;
                }
            } else {
                DOBQuery = "*";
            }

            String clientID = clientIdField.getText().equals("") ? "*" : clientIdField.getText();

            String username = usernameField.getText().equals("") ? "*" : usernameField.getText();

            String email = emailField.getText().equals("") ? "*" : emailField.getText();

            String name = nameField.getText().equals("") ? "*" : nameField.getText();

            String[] clientQuery = {clientID, "client", "*", DOBQuery, username, email, name};

            return pdf.createQuery(clientQuery);   
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please use the correct format for each field");
        }
        return null;
    }

    public void setQueryLabel(String label) {
        this.queryLabel.setText(label);
    }

    private com.toedter.calendar.JDateChooser DOBField1;

    private ArrayList<String> comparisonSymbol;
    private Iterator<String> comparisonSymbolDOBIterator;


    // Variables declaration - do not modify                     
    private javax.swing.JButton DOBButton;
    private com.toedter.calendar.JDateChooser DOBField;
    private javax.swing.JLabel DOBLabel;
    private javax.swing.JPanel DOBPAnel;
    private javax.swing.JTextField clientIdField;
    private javax.swing.JLabel clientIdLabel;
    private javax.swing.JTextField emailField;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel queryLabel;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration                   
}
